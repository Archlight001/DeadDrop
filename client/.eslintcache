[{"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/index.js":"1","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/reportWebVitals.js":"2","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/components/Chat.jsx":"3","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/containers/App.js":"4","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/containers/Main.jsx":"5","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/components/Homepage.jsx":"6","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/contexts/MainProvider.js":"7","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/contexts/SocketProvider.js":"8","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/utils/connect.js":"9","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/components/Participants.jsx":"10","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/components/Modal.jsx":"11","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/contexts/ChatProvider.js":"12"},{"size":511,"mtime":1608635177669,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1607424344059,"results":"15","hashOfConfig":"14"},{"size":6370,"mtime":1615473497436,"results":"16","hashOfConfig":"14"},{"size":377,"mtime":1608800592993,"results":"17","hashOfConfig":"14"},{"size":580,"mtime":1610648595648,"results":"18","hashOfConfig":"14"},{"size":1454,"mtime":1610623140228,"results":"19","hashOfConfig":"14"},{"size":3589,"mtime":1610642208808,"results":"20","hashOfConfig":"14"},{"size":735,"mtime":1610648740053,"results":"21","hashOfConfig":"14"},{"size":337,"mtime":1609164212375,"results":"22","hashOfConfig":"14"},{"size":3574,"mtime":1610617768347,"results":"23","hashOfConfig":"14"},{"size":1731,"mtime":1610623187886,"results":"24","hashOfConfig":"14"},{"size":1017,"mtime":1610651601006,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"enc1c5",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/index.js",[],["54","55"],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/reportWebVitals.js",[],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/components/Chat.jsx",["56","57","58"],"import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport \"../css/Chat.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMain } from \"../contexts/MainProvider\";\nimport Participants from \"./Participants\";\nimport { apiCall } from \"../utils/connect\";\nimport { useChat } from \"../contexts/ChatProvider\";\nimport { useSocket } from \"../contexts/SocketProvider\";\n\nfunction Chat() {\n  let history = useHistory();\n  let { data, setData, isAdmin } = useMain();\n  let { chatLog, addToChat } = useChat();\n  let { socket } = useSocket();\n  let [participantsDisplayStatus, displayParticipants] = useState(false);\n\n  let [participants, setParticipants] = useState([]);\n  let [onlineParticipants, setOnlineParticipants] = useState([]);\n\n  useEffect(() => {\n    async function getParticipantsData() {\n      let chatParticipants = await apiCall(\"post\", \"/api/getParticipants\", {\n        id: data.SessionId,\n      });\n      setParticipants(chatParticipants);\n    }\n\n    console.log(\"Data is \", data);\n\n    if (data !== null) {\n      getParticipantsData();\n    }\n  }, []);\n\n  async function endSession() {\n    let UserId = data.UserId;\n    let SessionID = data.SessionId;\n    let deleteSession = await apiCall(\"post\", \"/api/deleteSession\", {\n      UserId,\n      SessionID,\n    });\n\n    if (deleteSession.status === \"success\") {\n      localStorage.removeItem(\"Data\");\n      setData(null);\n      history.push(\"/\");\n    } else {\n      alert(\"An error has occurred\");\n    }\n  }\n\n  function showParticipants() {\n    displayParticipants(true);\n    socket.emit(\"get-participants\");\n    socket.on(\"get-participants\", (data) => {\n      setOnlineParticipants(data);\n    });\n  }\n\n  async function deleteParticipant(UserId) {\n    var val = window.confirm(\"You are about to delete a user\");\n    if (val) {\n      var SessionID = data.SessionId;\n      let deleteOperation = await apiCall(\"post\", \"/api/deleteParticipant\", {\n        SessionID,\n        UserId,\n      });\n      if (deleteOperation.deleted) {\n        setParticipants(deleteOperation.Participants);\n      }\n    }\n  }\n\n  async function editCodename(UserId) {\n    var newCodename = prompt(\"Enter your new Codename\");\n    if (newCodename.trim() !== \"\") {\n      var con = window.confirm(`Changing codename to ${newCodename} ?`);\n      if (con) {\n        var SessionID = data.SessionId;\n        var editOperation = await apiCall(\"post\", \"/api/editCodename\", {\n          SessionID,\n          UserId,\n          newCodename,\n        });\n        if (editOperation.status === \"success\") {\n          let newData = { ...data, Codename: editOperation.newCodename };\n          localStorage.setItem(\"Data\", JSON.stringify(newData));\n          setData(newData);\n          setParticipants(editOperation.Participants);\n        }\n      }\n    }\n  }\n\n  let [messageInput, setMessageInput] = useState(\"\");\n\n  function sendMessage(e) {\n    e.preventDefault();\n    let message = {\n      type: \"message\",\n      direction: \"left\",\n      User: data.Codename,\n      Message: messageInput,\n    };\n\n    let newArray = [...chatLog, message];\n    socket.emit(\"new-message\", { ...message, sessionId: data.SessionId });\n    addToChat(newArray);\n\n    scrollField();\n\n    setMessageInput(\"\");\n  }\n\n  function onEnterPress(e) {\n    if ([\"Enter\"].includes(e.key)) {\n      sendMessage(e);\n    }\n  }\n\n  let displayChats = chatLog.map((chat, index) => {\n    if (chat.type === \"announcement\") {\n      return <h4 key={index}>{chat.content}</h4>;\n    } else if (chat.type === \"message\") {\n      if (chat.direction === \"left\") {\n        return (\n          <div key={index} className=\"message__content__L\">\n            <p className=\"content__title\">{chat.User}</p>\n            <p className=\"content__message\">{chat.Message}</p>\n          </div>\n        );\n      } else {\n        return (\n          <div key={index} className=\"side__right\">\n            <div className=\"message__content__R\">\n              <div>\n                <p className=\"content__title\">{chat.User}</p>\n              </div>\n              <p className=\"content__message\">{chat.Message}</p>\n            </div>\n          </div>\n        );\n      }\n    }\n    return <div key={index}></div>;\n  });\n\n  //Make message field always scroll to the bottom\n  function scrollField(){\n    var element = document.getElementsByClassName(\"message__field\")\n    element[0].scrollTop = element[0].scrollHeight;\n  }\n\n  return (\n    <div className=\"main__chat__container\">\n      <div className=\"chat__session__buttons\">\n        <button onClick={showParticipants}>Participants</button>\n        <button onClick={endSession}>End Session</button>\n      </div>\n\n      {participantsDisplayStatus && (\n        <Participants\n          displayParticipants={displayParticipants}\n          participantsDisplayStatus={participantsDisplayStatus}\n          onlineParticipants={onlineParticipants}\n          SessionId={data.SessionId}\n          participants={participants}\n          setParticipants={setParticipants}\n          deleteParticipant={deleteParticipant}\n          editCodename={editCodename}\n          isAdmin={isAdmin}\n          CurrentUserId={data.UserId}\n        />\n      )}\n\n      <div className=\"chat__section\">\n        <div className=\"message__field\">\n          {/* <h4>Wolf has joined the chat</h4> */}\n\n          {displayChats}\n\n          {/* <div className=\"message__content__L\">\n            <p className=\"content__title\">Wolf</p>\n            <p className=\"content__message\">\n              Hi, I hope you've got the package for me\n            </p>\n          </div> */}\n\n          {/* <div className=\"side__right\">\n            <div className=\"message__content__R\">\n              <div>\n                <p className=\"content__title\">Lion</p>\n              </div>\n              <p className=\"content__message\">Right here, come get it</p>\n            </div>\n          </div> */}\n        </div>\n        <form onKeyDown={onEnterPress} onSubmit={(e) => e.preventDefault()}>\n          <div className=\"input__container\">\n            <div>\n              <input\n                type=\"text\"\n                onChange={(e) => setMessageInput(e.target.value)}\n                value={messageInput}\n              />\n              <SendIcon onClick={sendMessage} />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/containers/App.js",[],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/containers/Main.jsx",[],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/components/Homepage.jsx",[],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/contexts/MainProvider.js",["59"],"import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useContext } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useHistory } from \"react-router-dom\";\nimport { apiCall } from \"../utils/connect\";\n\nconst MainContext = React.createContext();\n\nexport function useMain() {\n  return useContext(MainContext);\n}\n\nexport function MainProvider({ children }) {\n  let history = useHistory();\n\n  const [data, setData] = useState(JSON.parse(localStorage.getItem(\"Data\")));\n\n  const [isAdmin, setAdmin] = useState(false);\n\n  async function createSession(Email) {\n    const Result = await apiCall(\"post\", \"/api/validate\", { Email });\n\n    if (Result.exists) {\n      alert(\"A Session has already been created with this mail\");\n    } else {\n      const SessionId = uuidv4();\n      const UserId = uuidv4();\n\n      var date = new Date();\n\n      var Data = JSON.parse(localStorage.getItem(\"Data\"));\n      if (localStorage.getItem(\"Data\") !== null) {\n        if (date.getTime() > Data.date) {\n          localStorage.removeItem(\"Data\");\n          date.setTime(date.getTime() + 1 * 24 * 60 * 60 * 1000);\n          localStorage.setItem(\n            \"Data\",\n            JSON.stringify({\n              SessionId,\n              UserId,\n              Email,\n              date: date.getTime(),\n              Codename: Result.Codename,\n            })\n          );\n        }\n      } else {\n        date.setTime(date.getTime() + 1 * 24 * 60 * 60 * 1000);\n        // date.setTime(date.getTime() +  5 * 1000);\n\n        localStorage.setItem(\n          \"Data\",\n          JSON.stringify({\n            SessionId,\n            UserId,\n            Email,\n            date: date.getTime(),\n            Codename: Result.Codename,\n          })\n        );\n      }\n\n      const createnewSession = await apiCall(\n        \"post\",\n        \"/api/createSession\",\n        JSON.parse(localStorage.getItem(\"Data\"))\n      );\n\n      if(createnewSession.status === \"success\"){\n        setData(JSON.parse(localStorage.getItem(\"Data\")));\n      }else{\n        localStorage.removeItem(\"Data\");\n        console.log(\"An error has occured\")\n      }\n\n    }\n  }\n\n  async function joinSession(SessionId, UserId) {\n    const Result = await apiCall(\"post\", \"/api/validate\", {\n      SessionId,\n      UserId,\n    });\n\n    if (!Result.exists && localStorage.getItem(\"Data\") !== null) {\n      localStorage.removeItem(\"Data\");\n      setData(null);\n    } else if (Result.exists) {\n      localStorage.setItem(\n        \"Data\",\n        JSON.stringify({\n          SessionId,\n          UserId,\n          date: Result.Date,\n          Codename: Result.Codename,\n        })\n      );\n      setData(JSON.parse(localStorage.getItem(\"Data\")));\n    }\n  }\n\n  useEffect(() => {\n    async function checkAdmin() {\n      let checkUser = await apiCall(\"post\", \"/api/isAdmin\", {\n        id: data.UserId,\n      });\n      setAdmin(checkUser.isAdmin);\n    }\n\n    async function deleteSession() {\n      let UserId = data.UserId;\n      let SessionID = data.SessionId;\n      await apiCall(\"post\", \"/api/deleteSession\", {\n        UserId,\n        SessionID,\n      });\n    }\n\n    if (data !== null) {\n      var date = new Date();\n\n      if (date.getTime() > data.date) {\n        deleteSession();\n        localStorage.removeItem(\"Data\");\n        setData(null);\n        history.push(\"/\");\n      } else {\n        checkAdmin();\n        history.push(\"/chat\");\n      }\n    }\n  }, [data]);\n\n  return (\n    <MainContext.Provider\n      value={{ createSession, joinSession, data, setData, isAdmin }}\n    >\n      {children}\n    </MainContext.Provider>\n  );\n}\n","/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/contexts/SocketProvider.js",[],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/utils/connect.js",[],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/components/Participants.jsx",[],["60","61"],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/components/Modal.jsx",[],"/home/chris/Development/Projects/Ongoing/DeadDrop/client/src/contexts/ChatProvider.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":28},{"ruleId":"66","severity":1,"message":"70","line":1,"column":41,"nodeType":"68","messageId":"69","endLine":1,"endColumn":48},{"ruleId":"71","severity":1,"message":"72","line":34,"column":6,"nodeType":"73","endLine":34,"endColumn":8,"suggestions":"74"},{"ruleId":"71","severity":1,"message":"75","line":133,"column":6,"nodeType":"73","endLine":133,"endColumn":12,"suggestions":"76"},{"ruleId":"62","replacedBy":"77"},{"ruleId":"64","replacedBy":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["82"],["79"],["80"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [data]",{"range":"87","text":"88"},"Update the dependencies array to be: [data, history]",{"range":"89","text":"90"},[1134,1136],"[data]",[3415,3421],"[data, history]"]